// Code generated by goa v3.10.2, DO NOT EDIT.
//
// metadata HTTP client CLI support package
//
// Command:
// $ goa gen github.com/reinventingscience/ivcap-core-api/design

package client

import (
	metadata "github.com/reinventingscience/ivcap-core-api/gen/metadata"

	goa "goa.design/goa/v3/pkg"
)

// BuildReadPayload builds the payload for the metadata read endpoint from CLI
// flags.
func BuildReadPayload(metadataReadEntityID string, metadataReadSchemaFilter string, metadataReadAtTime string, metadataReadJWT string) (*metadata.ReadPayload, error) {
	var err error
	var entityID string
	{
		entityID = metadataReadEntityID
		err = goa.MergeErrors(err, goa.ValidateFormat("entityID", entityID, goa.FormatURI))
		if err != nil {
			return nil, err
		}
	}
	var schemaFilter *string
	{
		if metadataReadSchemaFilter != "" {
			schemaFilter = &metadataReadSchemaFilter
		}
	}
	var atTime *string
	{
		if metadataReadAtTime != "" {
			atTime = &metadataReadAtTime
			err = goa.MergeErrors(err, goa.ValidateFormat("atTime", *atTime, goa.FormatDateTime))
			if err != nil {
				return nil, err
			}
		}
	}
	var jwt string
	{
		jwt = metadataReadJWT
	}
	v := &metadata.ReadPayload{}
	v.EntityID = entityID
	v.SchemaFilter = schemaFilter
	v.AtTime = atTime
	v.JWT = jwt

	return v, nil
}

// BuildAddPayload builds the payload for the metadata add endpoint from CLI
// flags.
func BuildAddPayload(metadataAddEntityID string, metadataAddSchema string, metadataAddJWT string, metadataAddContentType string) (*metadata.AddPayload, error) {
	var err error
	var entityID string
	{
		entityID = metadataAddEntityID
		err = goa.MergeErrors(err, goa.ValidateFormat("entityID", entityID, goa.FormatURI))
		if err != nil {
			return nil, err
		}
	}
	var schema string
	{
		schema = metadataAddSchema
		err = goa.MergeErrors(err, goa.ValidateFormat("schema", schema, goa.FormatURI))
		if err != nil {
			return nil, err
		}
	}
	var jwt string
	{
		jwt = metadataAddJWT
	}
	var contentType *string
	{
		if metadataAddContentType != "" {
			contentType = &metadataAddContentType
		}
	}
	v := &metadata.AddPayload{}
	v.EntityID = entityID
	v.Schema = schema
	v.JWT = jwt
	v.ContentType = contentType

	return v, nil
}

// BuildRevokePayload builds the payload for the metadata revoke endpoint from
// CLI flags.
func BuildRevokePayload(metadataRevokeEntityID string, metadataRevokeJWT string) (*metadata.RevokePayload, error) {
	var err error
	var entityID string
	{
		entityID = metadataRevokeEntityID
		err = goa.MergeErrors(err, goa.ValidateFormat("entityID", entityID, goa.FormatURI))
		if err != nil {
			return nil, err
		}
	}
	var jwt string
	{
		jwt = metadataRevokeJWT
	}
	v := &metadata.RevokePayload{}
	v.EntityID = &entityID
	v.JWT = jwt

	return v, nil
}
