// Code generated by goa v3.10.2, DO NOT EDIT.
//
// metadata HTTP client types
//
// Command:
// $ goa gen github.com/reinventingscience/ivcap-core-api/design

package client

import (
	metadata "github.com/reinventingscience/ivcap-core-api/gen/metadata"
	metadataviews "github.com/reinventingscience/ivcap-core-api/gen/metadata/views"

	goa "goa.design/goa/v3/pkg"
)

// ReadResponseBody is the type of the "metadata" service "read" endpoint HTTP
// response body.
type ReadResponseBody struct {
	// List of metadata records
	Records []*MetadataListItemResponseBody `form:"records,omitempty" json:"records,omitempty" xml:"records,omitempty"`
	// Navigation links
	Links *NavTResponseBody `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
}

// AddResponseBody is the type of the "metadata" service "add" endpoint HTTP
// response body.
type AddResponseBody struct {
	// Reference to service requested
	RecordID *string `form:"record-id,omitempty" json:"record-id,omitempty" xml:"record-id,omitempty"`
}

// ReadBadRequestResponseBody is the type of the "metadata" service "read"
// endpoint HTTP response body for the "bad-request" error.
type ReadBadRequestResponseBody struct {
	// Information message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ReadInvalidParameterResponseBody is the type of the "metadata" service
// "read" endpoint HTTP response body for the "invalid-parameter" error.
type ReadInvalidParameterResponseBody struct {
	// message describing expected type or pattern.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// name of parameter.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// provided parameter value.
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// ReadInvalidScopesResponseBody is the type of the "metadata" service "read"
// endpoint HTTP response body for the "invalid-scopes" error.
type ReadInvalidScopesResponseBody struct {
	// ID of involved resource
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ReadNotImplementedResponseBody is the type of the "metadata" service "read"
// endpoint HTTP response body for the "not-implemented" error.
type ReadNotImplementedResponseBody struct {
	// Information message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// AddBadRequestResponseBody is the type of the "metadata" service "add"
// endpoint HTTP response body for the "bad-request" error.
type AddBadRequestResponseBody struct {
	// Information message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// AddInvalidParameterResponseBody is the type of the "metadata" service "add"
// endpoint HTTP response body for the "invalid-parameter" error.
type AddInvalidParameterResponseBody struct {
	// message describing expected type or pattern.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// name of parameter.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// provided parameter value.
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// AddInvalidScopesResponseBody is the type of the "metadata" service "add"
// endpoint HTTP response body for the "invalid-scopes" error.
type AddInvalidScopesResponseBody struct {
	// ID of involved resource
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// AddNotImplementedResponseBody is the type of the "metadata" service "add"
// endpoint HTTP response body for the "not-implemented" error.
type AddNotImplementedResponseBody struct {
	// Information message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// RevokeBadRequestResponseBody is the type of the "metadata" service "revoke"
// endpoint HTTP response body for the "bad-request" error.
type RevokeBadRequestResponseBody struct {
	// Information message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// RevokeInvalidParameterResponseBody is the type of the "metadata" service
// "revoke" endpoint HTTP response body for the "invalid-parameter" error.
type RevokeInvalidParameterResponseBody struct {
	// message describing expected type or pattern.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// name of parameter.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// provided parameter value.
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// RevokeInvalidScopesResponseBody is the type of the "metadata" service
// "revoke" endpoint HTTP response body for the "invalid-scopes" error.
type RevokeInvalidScopesResponseBody struct {
	// ID of involved resource
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// RevokeNotImplementedResponseBody is the type of the "metadata" service
// "revoke" endpoint HTTP response body for the "not-implemented" error.
type RevokeNotImplementedResponseBody struct {
	// Information message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// MetadataListItemResponseBody is used to define fields on response body types.
type MetadataListItemResponseBody struct {
	// Record ID
	RecordID *string `form:"record-id,omitempty" json:"record-id,omitempty" xml:"record-id,omitempty"`
	// Entity ID
	Entity *string `form:"entity,omitempty" json:"entity,omitempty" xml:"entity,omitempty"`
	// Schema ID
	Schema *string `form:"schema,omitempty" json:"schema,omitempty" xml:"schema,omitempty"`
	// Attached metadata aspect
	Aspect interface{} `form:"aspect,omitempty" json:"aspect,omitempty" xml:"aspect,omitempty"`
}

// NavTResponseBody is used to define fields on response body types.
type NavTResponseBody struct {
	Self  *string `form:"self,omitempty" json:"self,omitempty" xml:"self,omitempty"`
	First *string `form:"first,omitempty" json:"first,omitempty" xml:"first,omitempty"`
	Next  *string `form:"next,omitempty" json:"next,omitempty" xml:"next,omitempty"`
}

// NewReadMetaRTViewOK builds a "metadata" service "read" endpoint result from
// a HTTP "OK" response.
func NewReadMetaRTViewOK(body *ReadResponseBody) *metadataviews.ReadMetaRTView {
	v := &metadataviews.ReadMetaRTView{}
	v.Records = make([]*metadataviews.MetadataListItemView, len(body.Records))
	for i, val := range body.Records {
		v.Records[i] = unmarshalMetadataListItemResponseBodyToMetadataviewsMetadataListItemView(val)
	}
	v.Links = unmarshalNavTResponseBodyToMetadataviewsNavTView(body.Links)

	return v
}

// NewReadBadRequest builds a metadata service read endpoint bad-request error.
func NewReadBadRequest(body *ReadBadRequestResponseBody) *metadata.BadRequestT {
	v := &metadata.BadRequestT{
		Message: *body.Message,
	}

	return v
}

// NewReadInvalidCredential builds a metadata service read endpoint
// invalid-credential error.
func NewReadInvalidCredential() *metadata.InvalidCredentialsT {
	v := &metadata.InvalidCredentialsT{}

	return v
}

// NewReadInvalidParameter builds a metadata service read endpoint
// invalid-parameter error.
func NewReadInvalidParameter(body *ReadInvalidParameterResponseBody) *metadata.InvalidParameterValue {
	v := &metadata.InvalidParameterValue{
		Message: *body.Message,
		Name:    *body.Name,
		Value:   body.Value,
	}

	return v
}

// NewReadInvalidScopes builds a metadata service read endpoint invalid-scopes
// error.
func NewReadInvalidScopes(body *ReadInvalidScopesResponseBody) *metadata.InvalidScopesT {
	v := &metadata.InvalidScopesT{
		ID:      body.ID,
		Message: *body.Message,
	}

	return v
}

// NewReadNotImplemented builds a metadata service read endpoint
// not-implemented error.
func NewReadNotImplemented(body *ReadNotImplementedResponseBody) *metadata.NotImplementedT {
	v := &metadata.NotImplementedT{
		Message: *body.Message,
	}

	return v
}

// NewReadNotAuthorized builds a metadata service read endpoint not-authorized
// error.
func NewReadNotAuthorized() *metadata.UnauthorizedT {
	v := &metadata.UnauthorizedT{}

	return v
}

// NewAddMetaRTViewOK builds a "metadata" service "add" endpoint result from a
// HTTP "OK" response.
func NewAddMetaRTViewOK(body *AddResponseBody) *metadataviews.AddMetaRTView {
	v := &metadataviews.AddMetaRTView{
		RecordID: body.RecordID,
	}

	return v
}

// NewAddBadRequest builds a metadata service add endpoint bad-request error.
func NewAddBadRequest(body *AddBadRequestResponseBody) *metadata.BadRequestT {
	v := &metadata.BadRequestT{
		Message: *body.Message,
	}

	return v
}

// NewAddInvalidCredential builds a metadata service add endpoint
// invalid-credential error.
func NewAddInvalidCredential() *metadata.InvalidCredentialsT {
	v := &metadata.InvalidCredentialsT{}

	return v
}

// NewAddInvalidParameter builds a metadata service add endpoint
// invalid-parameter error.
func NewAddInvalidParameter(body *AddInvalidParameterResponseBody) *metadata.InvalidParameterValue {
	v := &metadata.InvalidParameterValue{
		Message: *body.Message,
		Name:    *body.Name,
		Value:   body.Value,
	}

	return v
}

// NewAddInvalidScopes builds a metadata service add endpoint invalid-scopes
// error.
func NewAddInvalidScopes(body *AddInvalidScopesResponseBody) *metadata.InvalidScopesT {
	v := &metadata.InvalidScopesT{
		ID:      body.ID,
		Message: *body.Message,
	}

	return v
}

// NewAddNotImplemented builds a metadata service add endpoint not-implemented
// error.
func NewAddNotImplemented(body *AddNotImplementedResponseBody) *metadata.NotImplementedT {
	v := &metadata.NotImplementedT{
		Message: *body.Message,
	}

	return v
}

// NewAddNotAuthorized builds a metadata service add endpoint not-authorized
// error.
func NewAddNotAuthorized() *metadata.UnauthorizedT {
	v := &metadata.UnauthorizedT{}

	return v
}

// NewRevokeBadRequest builds a metadata service revoke endpoint bad-request
// error.
func NewRevokeBadRequest(body *RevokeBadRequestResponseBody) *metadata.BadRequestT {
	v := &metadata.BadRequestT{
		Message: *body.Message,
	}

	return v
}

// NewRevokeInvalidCredential builds a metadata service revoke endpoint
// invalid-credential error.
func NewRevokeInvalidCredential() *metadata.InvalidCredentialsT {
	v := &metadata.InvalidCredentialsT{}

	return v
}

// NewRevokeInvalidParameter builds a metadata service revoke endpoint
// invalid-parameter error.
func NewRevokeInvalidParameter(body *RevokeInvalidParameterResponseBody) *metadata.InvalidParameterValue {
	v := &metadata.InvalidParameterValue{
		Message: *body.Message,
		Name:    *body.Name,
		Value:   body.Value,
	}

	return v
}

// NewRevokeInvalidScopes builds a metadata service revoke endpoint
// invalid-scopes error.
func NewRevokeInvalidScopes(body *RevokeInvalidScopesResponseBody) *metadata.InvalidScopesT {
	v := &metadata.InvalidScopesT{
		ID:      body.ID,
		Message: *body.Message,
	}

	return v
}

// NewRevokeNotImplemented builds a metadata service revoke endpoint
// not-implemented error.
func NewRevokeNotImplemented(body *RevokeNotImplementedResponseBody) *metadata.NotImplementedT {
	v := &metadata.NotImplementedT{
		Message: *body.Message,
	}

	return v
}

// NewRevokeNotAuthorized builds a metadata service revoke endpoint
// not-authorized error.
func NewRevokeNotAuthorized() *metadata.UnauthorizedT {
	v := &metadata.UnauthorizedT{}

	return v
}

// ValidateReadBadRequestResponseBody runs the validations defined on
// read_bad-request_response_body
func ValidateReadBadRequestResponseBody(body *ReadBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateReadInvalidParameterResponseBody runs the validations defined on
// read_invalid-parameter_response_body
func ValidateReadInvalidParameterResponseBody(body *ReadInvalidParameterResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateReadInvalidScopesResponseBody runs the validations defined on
// read_invalid-scopes_response_body
func ValidateReadInvalidScopesResponseBody(body *ReadInvalidScopesResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	return
}

// ValidateReadNotImplementedResponseBody runs the validations defined on
// read_not-implemented_response_body
func ValidateReadNotImplementedResponseBody(body *ReadNotImplementedResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateAddBadRequestResponseBody runs the validations defined on
// add_bad-request_response_body
func ValidateAddBadRequestResponseBody(body *AddBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateAddInvalidParameterResponseBody runs the validations defined on
// add_invalid-parameter_response_body
func ValidateAddInvalidParameterResponseBody(body *AddInvalidParameterResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateAddInvalidScopesResponseBody runs the validations defined on
// add_invalid-scopes_response_body
func ValidateAddInvalidScopesResponseBody(body *AddInvalidScopesResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	return
}

// ValidateAddNotImplementedResponseBody runs the validations defined on
// add_not-implemented_response_body
func ValidateAddNotImplementedResponseBody(body *AddNotImplementedResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRevokeBadRequestResponseBody runs the validations defined on
// revoke_bad-request_response_body
func ValidateRevokeBadRequestResponseBody(body *RevokeBadRequestResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRevokeInvalidParameterResponseBody runs the validations defined on
// revoke_invalid-parameter_response_body
func ValidateRevokeInvalidParameterResponseBody(body *RevokeInvalidParameterResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateRevokeInvalidScopesResponseBody runs the validations defined on
// revoke_invalid-scopes_response_body
func ValidateRevokeInvalidScopesResponseBody(body *RevokeInvalidScopesResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	return
}

// ValidateRevokeNotImplementedResponseBody runs the validations defined on
// revoke_not-implemented_response_body
func ValidateRevokeNotImplementedResponseBody(body *RevokeNotImplementedResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateMetadataListItemResponseBody runs the validations defined on
// MetadataListItemResponseBody
func ValidateMetadataListItemResponseBody(body *MetadataListItemResponseBody) (err error) {
	if body.RecordID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.record-id", *body.RecordID, goa.FormatURI))
	}
	if body.Entity != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.entity", *body.Entity, goa.FormatURI))
	}
	if body.Schema != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.schema", *body.Schema, goa.FormatURI))
	}
	return
}

// ValidateNavTResponseBody runs the validations defined on NavTResponseBody
func ValidateNavTResponseBody(body *NavTResponseBody) (err error) {
	if body.Self != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.self", *body.Self, goa.FormatURI))
	}
	if body.First != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.first", *body.First, goa.FormatURI))
	}
	if body.Next != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.next", *body.Next, goa.FormatURI))
	}
	return
}
