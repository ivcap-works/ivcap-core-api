// Code generated by goa v3.10.2, DO NOT EDIT.
//
// metadata views
//
// Command:
// $ goa gen cayp/api_gateway/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// ReadMetaRT is the viewed result type that is projected based on a view.
type ReadMetaRT struct {
	// Type to project
	Projected *ReadMetaRTView
	// View to render
	View string
}

// AddMetaRT is the viewed result type that is projected based on a view.
type AddMetaRT struct {
	// Type to project
	Projected *AddMetaRTView
	// View to render
	View string
}

// ReadMetaRTView is a type that runs validations on a projected type.
type ReadMetaRTView struct {
	// List of metadata records
	Records []*MetadataListItemView
	// Navigation links
	Links *NavTView
}

// MetadataListItemView is a type that runs validations on a projected type.
type MetadataListItemView struct {
	// Record ID
	RecordID *string
	// Entity ID
	Entity *string
	// Schema ID
	Schema *string
	// Attached metadata aspect
	Aspect interface{}
}

// NavTView is a type that runs validations on a projected type.
type NavTView struct {
	Self  *string
	First *string
	Next  *string
}

// AddMetaRTView is a type that runs validations on a projected type.
type AddMetaRTView struct {
	// Reference to service requested
	RecordID *string
}

var (
	// ReadMetaRTMap is a map indexing the attribute names of ReadMetaRT by view
	// name.
	ReadMetaRTMap = map[string][]string{
		"default": {
			"records",
			"links",
		},
	}
	// AddMetaRTMap is a map indexing the attribute names of AddMetaRT by view name.
	AddMetaRTMap = map[string][]string{
		"default": {
			"record-id",
		},
	}
)

// ValidateReadMetaRT runs the validations defined on the viewed result type
// ReadMetaRT.
func ValidateReadMetaRT(result *ReadMetaRT) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateReadMetaRTView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateAddMetaRT runs the validations defined on the viewed result type
// AddMetaRT.
func ValidateAddMetaRT(result *AddMetaRT) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateAddMetaRTView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateReadMetaRTView runs the validations defined on ReadMetaRTView using
// the "default" view.
func ValidateReadMetaRTView(result *ReadMetaRTView) (err error) {
	if result.Records == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("records", "result"))
	}
	if result.Links == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("links", "result"))
	}
	for _, e := range result.Records {
		if e != nil {
			if err2 := ValidateMetadataListItemView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if result.Links != nil {
		if err2 := ValidateNavTView(result.Links); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateMetadataListItemView runs the validations defined on
// MetadataListItemView.
func ValidateMetadataListItemView(result *MetadataListItemView) (err error) {
	if result.RecordID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.record-id", *result.RecordID, goa.FormatURI))
	}
	if result.Entity != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.entity", *result.Entity, goa.FormatURI))
	}
	if result.Schema != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.schema", *result.Schema, goa.FormatURI))
	}
	return
}

// ValidateNavTView runs the validations defined on NavTView.
func ValidateNavTView(result *NavTView) (err error) {
	if result.Self != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.self", *result.Self, goa.FormatURI))
	}
	if result.First != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.first", *result.First, goa.FormatURI))
	}
	if result.Next != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.next", *result.Next, goa.FormatURI))
	}
	return
}

// ValidateAddMetaRTView runs the validations defined on AddMetaRTView using
// the "default" view.
func ValidateAddMetaRTView(result *AddMetaRTView) (err error) {
	if result.RecordID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("record-id", "result"))
	}
	if result.RecordID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.record-id", *result.RecordID, goa.FormatURI))
	}
	return
}
