// Code generated by goa v3.10.2, DO NOT EDIT.
//
// metadata service
//
// Command:
// $ goa gen github.com/reinventingscience/ivcap-core-api/design

package metadata

import (
	metadataviews "github.com/reinventingscience/ivcap-core-api/gen/metadata/views"
	"context"
	"io"

	"goa.design/goa/v3/security"
)

// Manages the life cycle of metadata attached to an entity.
type Service interface {
	// Return a list of metadata records attached to an entity.
	Read(context.Context, *ReadPayload) (res *ReadMetaRT, err error)
	// Attach new metadata to an entity.
	Add(context.Context, *AddPayload, io.ReadCloser) (res *AddMetaRT, err error)
	// Retract a previously created statement.
	Revoke(context.Context, *RevokePayload) (err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "metadata"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"read", "add", "revoke"}

// AddMetaRT is the result type of the metadata service add method.
type AddMetaRT struct {
	// Reference to service requested
	RecordID string
}

// AddPayload is the payload type of the metadata service add method.
type AddPayload struct {
	// Entity to which attach metadata
	EntityID string
	// Schema of metadata
	Schema string
	// Content-Type header, MUST be of application/json.
	ContentType *string
	// JWT used for authentication
	JWT string
}

// Bad arguments supplied.
type BadRequestT struct {
	// Information message
	Message string
}

// Provided credential is not valid.
type InvalidCredentialsT struct {
}

// InvalidParameterValue is the error returned when a parameter has the wrong
// value.
type InvalidParameterValue struct {
	// message describing expected type or pattern.
	Message string
	// name of parameter.
	Name string
	// provided parameter value.
	Value *string
}

// Caller not authorized to access required scope.
type InvalidScopesT struct {
	// ID of involved resource
	ID *string
	// Message of error
	Message string
}

type MetadataListItem struct {
	// Record ID
	RecordID *string
	// Entity ID
	Entity *string
	// Schema ID
	Schema *string
	// Attached metadata aspect
	Aspect interface{}
}

type NavT struct {
	Self  *string
	First *string
	Next  *string
}

// Method is not yet implemented.
type NotImplementedT struct {
	// Information message
	Message string
}

// ReadMetaRT is the result type of the metadata service read method.
type ReadMetaRT struct {
	// List of metadata records
	Records []*MetadataListItem
	// Navigation links
	Links *NavT
}

// ReadPayload is the payload type of the metadata service read method.
type ReadPayload struct {
	// Entity for which to request metadata
	EntityID string
	// Optional comma separated list of schemas to filter on
	SchemaFilter *string
	// Return metadata which where valid at that time [now]
	AtTime *string
	// JWT used for authentication
	JWT string
}

// NotFound is the type returned when attempting to manage a resource that does
// not exist.
type ResourceNotFoundT struct {
	// ID of missing resource
	ID string
	// Message of error
	Message string
}

// RevokePayload is the payload type of the metadata service revoke method.
type RevokePayload struct {
	// Record ID to restract
	EntityID *string
	// JWT used for authentication
	JWT string
}

// ServiceNotAvailable is the type returned when the service necessary to
// fulfill the request is currently not available.
type ServiceNotAvailableT struct {
}

// Unauthorized access to resource
type UnauthorizedT struct {
}

// Error returns an error description.
func (e *BadRequestT) Error() string {
	return "Bad arguments supplied."
}

// ErrorName returns "BadRequestT".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *BadRequestT) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "BadRequestT".
func (e *BadRequestT) GoaErrorName() string {
	return "bad-request"
}

// Error returns an error description.
func (e *InvalidCredentialsT) Error() string {
	return "Provided credential is not valid."
}

// ErrorName returns "InvalidCredentialsT".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *InvalidCredentialsT) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "InvalidCredentialsT".
func (e *InvalidCredentialsT) GoaErrorName() string {
	return "invalid-credential"
}

// Error returns an error description.
func (e *InvalidParameterValue) Error() string {
	return "InvalidParameterValue is the error returned when a parameter has the wrong value."
}

// ErrorName returns "InvalidParameterValue".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *InvalidParameterValue) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "InvalidParameterValue".
func (e *InvalidParameterValue) GoaErrorName() string {
	return "invalid-parameter"
}

// Error returns an error description.
func (e *InvalidScopesT) Error() string {
	return "Caller not authorized to access required scope."
}

// ErrorName returns "InvalidScopesT".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *InvalidScopesT) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "InvalidScopesT".
func (e *InvalidScopesT) GoaErrorName() string {
	return e.Message
}

// Error returns an error description.
func (e *NotImplementedT) Error() string {
	return "Method is not yet implemented."
}

// ErrorName returns "NotImplementedT".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *NotImplementedT) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "NotImplementedT".
func (e *NotImplementedT) GoaErrorName() string {
	return "not-implemented"
}

// Error returns an error description.
func (e *ResourceNotFoundT) Error() string {
	return "NotFound is the type returned when attempting to manage a resource that does not exist."
}

// ErrorName returns "ResourceNotFoundT".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ResourceNotFoundT) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "ResourceNotFoundT".
func (e *ResourceNotFoundT) GoaErrorName() string {
	return "not-found"
}

// Error returns an error description.
func (e *ServiceNotAvailableT) Error() string {
	return "ServiceNotAvailable is the type returned when the service necessary to fulfill the request is currently not available."
}

// ErrorName returns "ServiceNotAvailableT".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ServiceNotAvailableT) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "ServiceNotAvailableT".
func (e *ServiceNotAvailableT) GoaErrorName() string {
	return "not-available"
}

// Error returns an error description.
func (e *UnauthorizedT) Error() string {
	return "Unauthorized access to resource"
}

// ErrorName returns "UnauthorizedT".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *UnauthorizedT) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "UnauthorizedT".
func (e *UnauthorizedT) GoaErrorName() string {
	return "not-authorized"
}

// NewReadMetaRT initializes result type ReadMetaRT from viewed result type
// ReadMetaRT.
func NewReadMetaRT(vres *metadataviews.ReadMetaRT) *ReadMetaRT {
	return newReadMetaRT(vres.Projected)
}

// NewViewedReadMetaRT initializes viewed result type ReadMetaRT from result
// type ReadMetaRT using the given view.
func NewViewedReadMetaRT(res *ReadMetaRT, view string) *metadataviews.ReadMetaRT {
	p := newReadMetaRTView(res)
	return &metadataviews.ReadMetaRT{Projected: p, View: "default"}
}

// NewAddMetaRT initializes result type AddMetaRT from viewed result type
// AddMetaRT.
func NewAddMetaRT(vres *metadataviews.AddMetaRT) *AddMetaRT {
	return newAddMetaRT(vres.Projected)
}

// NewViewedAddMetaRT initializes viewed result type AddMetaRT from result type
// AddMetaRT using the given view.
func NewViewedAddMetaRT(res *AddMetaRT, view string) *metadataviews.AddMetaRT {
	p := newAddMetaRTView(res)
	return &metadataviews.AddMetaRT{Projected: p, View: "default"}
}

// newReadMetaRT converts projected type ReadMetaRT to service type ReadMetaRT.
func newReadMetaRT(vres *metadataviews.ReadMetaRTView) *ReadMetaRT {
	res := &ReadMetaRT{}
	if vres.Records != nil {
		res.Records = make([]*MetadataListItem, len(vres.Records))
		for i, val := range vres.Records {
			res.Records[i] = transformMetadataviewsMetadataListItemViewToMetadataListItem(val)
		}
	}
	if vres.Links != nil {
		res.Links = transformMetadataviewsNavTViewToNavT(vres.Links)
	}
	return res
}

// newReadMetaRTView projects result type ReadMetaRT to projected type
// ReadMetaRTView using the "default" view.
func newReadMetaRTView(res *ReadMetaRT) *metadataviews.ReadMetaRTView {
	vres := &metadataviews.ReadMetaRTView{}
	if res.Records != nil {
		vres.Records = make([]*metadataviews.MetadataListItemView, len(res.Records))
		for i, val := range res.Records {
			vres.Records[i] = transformMetadataListItemToMetadataviewsMetadataListItemView(val)
		}
	}
	if res.Links != nil {
		vres.Links = transformNavTToMetadataviewsNavTView(res.Links)
	}
	return vres
}

// newAddMetaRT converts projected type AddMetaRT to service type AddMetaRT.
func newAddMetaRT(vres *metadataviews.AddMetaRTView) *AddMetaRT {
	res := &AddMetaRT{}
	if vres.RecordID != nil {
		res.RecordID = *vres.RecordID
	}
	return res
}

// newAddMetaRTView projects result type AddMetaRT to projected type
// AddMetaRTView using the "default" view.
func newAddMetaRTView(res *AddMetaRT) *metadataviews.AddMetaRTView {
	vres := &metadataviews.AddMetaRTView{
		RecordID: &res.RecordID,
	}
	return vres
}

// transformMetadataviewsMetadataListItemViewToMetadataListItem builds a value
// of type *MetadataListItem from a value of type
// *metadataviews.MetadataListItemView.
func transformMetadataviewsMetadataListItemViewToMetadataListItem(v *metadataviews.MetadataListItemView) *MetadataListItem {
	if v == nil {
		return nil
	}
	res := &MetadataListItem{
		RecordID: v.RecordID,
		Entity:   v.Entity,
		Schema:   v.Schema,
		Aspect:   v.Aspect,
	}

	return res
}

// transformMetadataviewsNavTViewToNavT builds a value of type *NavT from a
// value of type *metadataviews.NavTView.
func transformMetadataviewsNavTViewToNavT(v *metadataviews.NavTView) *NavT {
	if v == nil {
		return nil
	}
	res := &NavT{
		Self:  v.Self,
		First: v.First,
		Next:  v.Next,
	}

	return res
}

// transformMetadataListItemToMetadataviewsMetadataListItemView builds a value
// of type *metadataviews.MetadataListItemView from a value of type
// *MetadataListItem.
func transformMetadataListItemToMetadataviewsMetadataListItemView(v *MetadataListItem) *metadataviews.MetadataListItemView {
	res := &metadataviews.MetadataListItemView{
		RecordID: v.RecordID,
		Entity:   v.Entity,
		Schema:   v.Schema,
		Aspect:   v.Aspect,
	}

	return res
}

// transformNavTToMetadataviewsNavTView builds a value of type
// *metadataviews.NavTView from a value of type *NavT.
func transformNavTToMetadataviewsNavTView(v *NavT) *metadataviews.NavTView {
	res := &metadataviews.NavTView{
		Self:  v.Self,
		First: v.First,
		Next:  v.Next,
	}

	return res
}
